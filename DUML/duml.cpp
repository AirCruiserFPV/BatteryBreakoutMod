#include <duml.h>
#include <inttypes.h>


const int Duml::CRC8[]  = {0, 94, -68, -30, 97, 63, -35, -125, -62, -100, 126, 32, -93, -3, 31, 65, -99, -61, 33, 127, -4, -94, 64, 30, 95, 1, -29, -67, 62, 96, -126, -36, 35, 125, -97, -63, 66, 28, -2, -96, -31, -65, 93, 3, -128, -34, 60, 98, -66, -32, 2, 92, -33, -127, 99, 61, 124, 34, -64, -98, 29, 67, -95, -1, 70, 24, -6, -92, 39, 121, -101, -59, -124, -38, 56, 102, -27, -69, 89, 7, -37, -123, 103, 57, -70, -28, 6, 88, 25, 71, -91, -5, 120, 38, -60, -102, 101, 59, -39, -121, 4, 90, -72, -26, -89, -7, 27, 69, -58, -104, 122, 36, -8, -90, 68, 26, -103, -57, 37, 123, 58, 100, -122, -40, 91, 5, -25, -71, -116, -46, 48, 110, -19, -77, 81, 15, 78, 16, -14, -84, 47, 113, -109, -51, 17, 79, -83, -13, 112, 46, -52, -110, -45, -115, 111, 49, -78, -20, 14, 80, -81, -15, 19, 77, -50, -112, 114, 44, 109, 51, -47, -113, 12, 82, -80, -18, 50, 108, -114, -48, 83, 13, -17, -79, -16, -82, 76, 18, -111, -49, 45, 115, -54, -108, 118, 40, -85, -11, 23, 73, 8, 86, -76, -22, 105, 55, -43, -117, 87, 9, -21, -75, 54, 104, -118, -44, -107, -53, 41, 119, -12, -86, 72, 22, -23, -73, 85, 11, -120, -42, 52, 106, 43, 117, -105, -55, 74, 20, -10, -88, 116, 42, -56, -106, 21, 75, -87, -9, -74, -24, 10, 84, -41, -119, 107, 53};
const int Duml::CRC16[] = {0, 4489, 8978, 12955, 17956, 22445, 25910, 29887, 35912, 40385, 44890, 48851, 51820, 56293, 59774, 63735, 4225, 264, 13203, 8730, 22181, 18220, 30135, 25662, 40137, 36160, 49115, 44626, 56045, 52068, 63999, 59510, 8450, 12427, 528, 5017, 26406, 30383, 17460, 21949, 44362, 48323, 36440, 40913, 60270, 64231, 51324, 55797, 12675, 8202, 4753, 792, 30631, 26158, 21685, 17724, 48587, 44098, 40665, 36688, 64495, 60006, 55549, 51572, 16900, 21389, 24854, 28831, 1056, 5545, 10034, 14011, 52812, 57285, 60766, 64727, 34920, 39393, 43898, 47859, 21125, 17164, 29079, 24606, 5281, 1320, 14259, 9786, 57037, 53060, 64991, 60502, 39145, 35168, 48123, 43634, 25350, 29327, 16404, 20893, 9506, 13483, 1584, 6073, 61262, 65223, 52316, 56789, 43370, 47331, 35448, 39921, 29575, 25102, 20629, 16668, 13731, 9258, 5809, 1848, 65487, 60998, 56541, 52564, 47595, 43106, 39673, 35696, 33800, 38273, 42778, 46739, 49708, 54181, 57662, 61623, 2112, 6601, 11090, 15067, 20068, 24557, 28022, 31999, 38025, 34048, 47003, 42514, 53933, 49956, 61887, 57398, 6337, 2376, 15315, 10842, 24293, 20332, 32247, 27774, 42250, 46211, 34328, 38801, 58158, 62119, 49212, 53685, 10562, 14539, 2640, 7129, 28518, 32495, 19572, 24061, 46475, 41986, 38553, 34576, 62383, 57894, 53437, 49460, 14787, 10314, 6865, 2904, 32743, 28270, 23797, 19836, 50700, 55173, 58654, 62615, 32808, 37281, 41786, 45747, 19012, 23501, 26966, 30943, 3168, 7657, 12146, 16123, 54925, 50948, 62879, 58390, 37033, 33056, 46011, 41522, 23237, 19276, 31191, 26718, 7393, 3432, 16371, 11898, 59150, 63111, 50204, 54677, 41258, 45219, 33336, 37809, 27462, 31439, 18516, 23005, 11618, 15595, 3696, 8185, 63375, 58886, 54429, 50452, 45483, 40994, 37561, 33584, 31687, 27214, 22741, 18780, 15843, 11370, 7921, 3960};
const int Duml::ZERO[]  = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// =======================================================================================================
Duml::Duml(){	
}

// -------------------------------------------------------------------------------------------------------
Duml::Duml(int buff[]){	
	init(buff);
}

// -------------------------------------------------------------------------------------------------------
void Duml::init(int buff[]){
	HexString = buff;
	Calc();
}

// -------------------------------------------------------------------------------------------------------
void Duml::Clear(){
	HexString = ZERO;
	Valid = false;
	Header = false;
}

// -------------------------------------------------------------------------------------------------------
void Duml::Calc(){
	CalcLength();
	CalcCRC8();
	CalcCRC8Sent();
	CalcVersion();
	CalcSenderID();
	CalcSenderType();
	CalcReceiverID();
	CalcReceiverType();
	CalcReceiverID();
	CalcReceiverType();
	CalcSeq();
	CalcCMDSet();
	CalcCMDID();
	CalcCMDType();
	CalcIsNeedAck();
	CalcCRC16();
	CalcCRC16Sent();
	
	CalcCellVoltages();
	CalcBatteryState();

	if (Crc8 == Crc8Sent) Header = true;
	else Header = false;
	
	if (Crc16[0] == Crc16Sent[0] && Crc16[1] == Crc16Sent[1]) Valid = true;
	else Valid = false;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcLength(){
  Len = DecodeBytes(1,2) & 1023;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcCRC8(){
  int b2    = 119;
  Crc8 = 0;
  
  for (int i2=0;i2<3;i2++){
    b2 = CRC8[(b2^HexString[i2]) & 255];
  }
  
  Crc8 = b2 & 0xff;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcCRC8Sent(){
  Crc8Sent = HexString[3];
}

// -------------------------------------------------------------------------------------------------------
bool Duml::CheckHeader(){
  if (Crc8 == HexString[3]) return true;
  else return false;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcCRC16(){
  int i2 = 13970;  
  int i  = Len-2;
        
  for (int i3=0;i3<i;i3++){
    i2 = CRC16[(i2 ^ HexString[i3]) & 255] ^ (i2 >> 8);
  }
        
  Crc16[0] = i2 & 255;
  Crc16[1] = (65280 & i2) >> 8;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcCRC16Sent(){
  Crc16Sent[0] = HexString[Len-2];
  Crc16Sent[1] = HexString[Len-1];
}


// -------------------------------------------------------------------------------------------------------
bool Duml::CheckDuml(){
  bool result = true;
  
  if (Crc16[0] != Crc16Sent[0]) result = false;
  if (Crc16[1] != Crc16Sent[1]) result = false;
  
  return result;
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcVersion(){
  Version = DecodeBytes(1,2) >> 10;
}


// -------------------------------------------------------------------------------------------------------
int Duml::DecodeBytes(int off, int len) {
  int value = 0;
  for (int i = (off + len) - 1; i >= off; i--) {
    value = (int16_t)(value << 8) | (int16_t)(HexString[i] & 255);
  }
  return value;
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcSenderID(){
  SenderID = HexString[4] >> 5;
}



// -------------------------------------------------------------------------------------------------------
void Duml::CalcSenderType(){
  SenderType = HexString[4] & 31;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcReceiverID(){
  ReceiverID = HexString[5] >> 5;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcReceiverType(){
  ReceiverType = HexString[5] & 31;
}


// -------------------------------------------------------------------------------------------------------
void Duml::CalcSeq(){
  Seq = DecodeBytes(6,2);
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcCMDSet(){
  CMDSet = HexString[9];
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcCMDID(){
  CMDID = HexString[10];
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcCMDType(){
  CMDType = HexString[8] >> 7;
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcIsNeedAck(){
  ACK = (HexString[8] >> 5) & 3;
}

// -------------------------------------------------------------------------------------------------------
int Duml::CalcData(){
	return Len-11-2;
}

// -------------------------------------------------------------------------------------------------------
void Duml::CalcCellVoltages(){
	if (Valid && CMDSet == 13 && CMDID == 3){
		NC = DecodeBytes(13, 1);
		
		if (NC==6) {
			CellVoltages[0] = DecodeBytes(14, 2);
			CellVoltages[1] = DecodeBytes(16, 2);
			CellVoltages[2] = DecodeBytes(18, 2);
			CellVoltages[3] = DecodeBytes(20, 2);
			CellVoltages[4] = DecodeBytes(22, 2);
			CellVoltages[5] = DecodeBytes(24, 2);
		}
		if (NC==4) {
			CellVoltages[0] = DecodeBytes(14, 2);
			CellVoltages[1] = DecodeBytes(16, 2);
			CellVoltages[2] = DecodeBytes(18, 2);
			CellVoltages[3] = DecodeBytes(20, 2);
		}
	} else {
		CellVoltages[0] = -1;
		CellVoltages[1] = -1;
		CellVoltages[2] = -1;
		CellVoltages[3] = -1;
		CellVoltages[4] = -1;
		CellVoltages[5] = -1;
	}	
}



// -------------------------------------------------------------------------------------------------------
void Duml::CalcBatteryState(){
	if (Valid && CMDSet == 13 && CMDID == 2){
		Voltage 		= DecodeBytes(13, 2);
		Current 		= DecodeBytes(17, 2);
		DesignCapacity	= DecodeBytes(21, 2);
		Capacity 		= DecodeBytes(25, 2);
		Temperature 	= DecodeBytes(29, 2);
		Percent 		= DecodeBytes(32, 2);
		Unknown1  	 	= DecodeBytes(46, 2);
		Unknown2 		= DecodeBytes(48, 2);
	} else {
		Voltage 		= -1;
		Current 		= -1;
		Capacity 		= -1;
		DesignCapacity 	= -1;
		Temperature 	= -1;
		Percent 		= -1;
		Unknown1  	 	= -1;
		Unknown2 		= -1;
	}	
}




// -------------------------------------------------------------------------------------------------------
void Duml::SetDesignCapacity(int cap) {
    Capacity = cap;
	
	HexString[21] = (cap & 255);
	HexString[22] = ((cap & 65280) >> 8);
	
	CalcCRC16();
	
	HexString[Len-2] = Crc16[0];
	HexString[Len-1] = Crc16[1];
}

// -------------------------------------------------------------------------------------------------------
void Duml::SetCapacity(int cap) {
    DesignCapacity = cap;
	
	HexString[25] = (cap & 255);
	HexString[26] = ((cap & 65280) >> 8);
	CalcCRC16();
	HexString[Len-2] = Crc16[0];
	HexString[Len-1] = Crc16[1];
}

// -------------------------------------------------------------------------------------------------------
void Duml::SetPercent(int prs) {
    Percent = prs;
	
	HexString[32] = (prs & 255);
	HexString[33] = ((prs & 65280) >> 8);
	CalcCRC16();
	HexString[Len-2] = Crc16[0];
	HexString[Len-1] = Crc16[1];
}

// -------------------------------------------------------------------------------------------------------
void Duml::SetSeq(int seq) {
    HexSeq[0] = (seq & 255);
    HexSeq[1] = ((seq & 65280) >> 8);
	
	HexString[6] = HexSeq[0];
	HexString[7] = HexSeq[1];
	CalcCRC16();
	HexString[Len-2] = Crc16[0];
	HexString[Len-1] = Crc16[1];
}


// -------------------------------------------------------------------------------------------------------
int Duml::CalcPing() {
	int result = 0;
	if (CMDSet == 33 && CMDID == 6){
		result = DecodeBytes(12,2);
	} 
	return result;
}

// -------------------------------------------------------------------------------------------------------
int Duml::SetPing(int ping) {
	int result = 0;
	if (CMDSet == 33 && CMDID == 6){
		HexString[12] = (ping & 255);
		HexString[13] = ((ping & 65280) >> 8);
		
		Calc();
		CalcCRC16();
		HexString[Len-2] = Crc16[0];
		HexString[Len-1] = Crc16[1];
	} 
	return result;
}
